Jusqu‚Äô√† pr√©sent, nous avons cr√©√© la page web de notre application Azertype, et nous l‚Äôavons rendue interactive gr√¢ce √† la gestion des √©v√©nements.

Dans cette derni√®re partie du cours, notre but sera de g√©rer les boutons radio de notre application pour permettre √† l‚Äôutilisateur de choisir entre les deux types de textes propos√©s : des mots ou des phrases.

Voici un aper√ßu de ce que cela devrait donner :

Capture d'√©cran du r√©sultat souhait√© : une phrase et deux boutons radios
D√©couvrez les diff√©rents types de champs de formulaire

√Ä ce stade du projet, notre objectif est de r√©pondre aux questions suivantes :

    Comment permettre aux utilisateurs de saisir des informations sur notre page web ?

    Comment leur permettre d‚Äôinteragir avec le contenu ?

La r√©ponse se trouve dans la gestion des formulaires, qui sont un √©l√©ment cl√© des pages web interactives. Un formulaire est un regroupement de champs que l'utilisateur peut utiliser pour saisir des donn√©es.

Mais‚Ä¶ notre page web contient d√©j√† un champ de formulaire, non ?

Exactement ! Mais il existe une grande vari√©t√© de champs en programmation, en fonction du type de donn√©es utilis√© (nombres, texte, e-mail, dates‚Ä¶). Concr√®tement, dans votre code, cela ressemble √† l‚Äôexemple ci-dessous :

<form>

    <label for="name">Nom</label>

    <input type="text" id="name" name="name" placeholder="Votre nom" required>

    <label for="email">Email</label>

    <input type="email" id="email" name="email" placeholder="Votre email" required>

    <label for="message">Message</label>

    <textarea id="message" name="message" placeholder="Votre message" required></textarea>

    <input type="submit" value="Envoyer">

</form>

Un formulaire est compos√© d‚Äôune balise form qui englobe une s√©rie d‚Äôautres balises qui composent le formulaire : labels, input, texterea et select.

Mais je ne comprends plus‚Ä¶ On parle de champs ou de balises ? ü§®

En fait, on parle de champ ou de champ de saisie pour √©voquer les √©l√©ments qui permettent √† l‚Äôutilisateur de saisir une donn√©e dans un formulaire. Mais, en HTML, ces champs sont r√©dig√©s gr√¢ce √† des balises d√©di√©es : input, textarea, select‚Ä¶

Revenons en d√©tail sur chacune d‚Äôentre elles‚Ä¶ üòâ
Les balises labels

Les balises labels servent √† indiquer un texte, li√© au champ que l‚Äôutilisateur va devoir remplir. 
Les balises input

Les balises input (‚Äúentr√©e‚Äù, en fran√ßais) forment le c≈ìur des formulaires. Elles permettent √† l‚Äôutilisateur de saisir des donn√©es. D‚Äôailleurs, nous en avons d√©j√† utilis√© une dans notre projet. Eh oui, rappelez-vous, c‚Äôest gr√¢ce √† cela que le joueur peut maintenant saisir le mot qu‚Äôil doit recopier.

<input type="text" id="inputEcriture" name="inputEcriture">

Dans cet exemple, l‚Äôattribut type=‚Äùtext‚Äù permet de d√©finir le type de donn√©es que l‚Äôutilisateur peut saisir :

    text : pour saisir un texte ;

    password : pour saisir un texte tout en cachant ce qui est saisi ;

    email : pour saisir un texte et v√©rifier que son format correspond bien √† celui d‚Äôun e-mail ; 

    number : pour saisir un nombre ; 

    checkbox : pour afficher une case √† cocher ;

    radio : pour afficher un bouton radio, c‚Äôest-√†-dire un bouton qui permet √† l'utilisateur de s√©lectionner un seul √©l√©ment dans une liste ;

    date : pour saisir une date √† l‚Äôaide d‚Äôun calendrier qui s‚Äôaffiche au clic sur le champ.

N‚Äôh√©sitez pas √† explorer la documentation pour d√©couvrir d‚Äôautres types de donn√©es.
Les balises textarea

La balise input de type texte ne comporte qu‚Äôune seule ligne. Elle n‚Äôest donc pas indiqu√©e pour saisir une grande portion de texte, comme un commentaire. Dans ce cas, la meilleure solution est d‚Äôutiliser une balise textarea, dans laquelle il sera plus pratique d‚Äô√©crire des paragraphes :

<textarea name="textarea" id="textarea"></textarea>

Les balises select

La balise select permet de cr√©er une liste d√©roulante o√π l'utilisateur peut s√©lectionner une option √† partir d'une liste pr√©d√©finie d'options. La liste d'options est d√©finie √† l'aide de balises option imbriqu√©es √† l'int√©rieur de la balise select.

    Voici un exemple de champ select :

<select id="films" name="films">

    <option value="batman">Batman</option>

    <option value="seigneur-des-anneaux">Le seigneur des anneaux</option>

    <option value="titanic">Titanic</option>

</select>

Vous voulez en savoir plus sur les formulaires ? N‚Äôh√©sitez pas √† suivre ce chapitre du cours Cr√©ez votre site web avec HTML5 et CSS3.
R√©cup√©rez la valeur d‚Äôun champ

Maintenant que nous savons √† quoi ressemble un formulaire, il est temps de r√©cup√©rer, dans notre code JavaScript, le contenu de chacun de ces champs. Pour y parvenir, nous utiliserons diff√©rentes m√©thodes, en fonction du type de champ.
R√©cup√©rez les valeurs avec la propri√©t√© ‚Äúvalue‚Äù

La plupart du temps, il est assez simple de r√©cup√©rer la valeur d‚Äôun champ. Il suffit d‚Äôutiliser la propri√©t√© value.

    Voici un exemple avec un champ appel√© name :

<input type="text" id="nom" name="nom">

Pour r√©cup√©rer sa valeur en JavaScript, nous √©crirons :

let baliseNom = document.getElementById("nom")

let nom = baliseNom.value

console.log(nom); // affiche ce qui est contenu dans la balise name

Cette m√©thode fonctionne pour la plupart des balises :

    input de type texte, num√©rique, e-mail, mot de passe ; 

    textarea ;

    select. 

R√©cup√©rez les valeurs des cases √† cocher

Une case √† cocher est un cas particulier, car l‚Äôutilisateur ne rentre pas une valeur. Il d√©cide de cocher, ou non, la case. La valeur de ce champ est donc n√©cessairement true si la case est coch√©e, ou false si elle ne l‚Äôest pas.

Pour v√©rifier cela, vous devez utiliser la propri√©t√© checked.

    Voici un exemple :

<input type="checkbox" id="accepter" name="accepter">

let baliseAccepter = document.getElementById("accepter")

let accepter = baliseAccepter.checked

console.log(accepter); // affiche true ou false

R√©cup√©rez les valeurs des boutons radio

Les boutons radio partagent le m√™me‚Äúname‚Äù. De cette mani√®re, lorsqu‚Äôun utilisateur clique sur un des boutons pour le s√©lectionner, les autres sont automatiquement d√©s√©lectionn√©s. Ici aussi, il s‚Äôagit d‚Äôun cas particulier.

    Regardons comment sont d√©clar√©s les boutons radio gr√¢ce √† l‚Äôexemple ci-dessous :

<label>Pr√©f√©rence de couleur :</label>

<input type="radio" id="red" name="couleur" value="red" checked>

<label for="red">Rouge</label>

<input type="radio" id="blue" name="couleur" value="blue">

<label for="blue">Bleu</label>

<input type="radio" id="green" name="couleur" value="green">

<label for="green">Vert</label>

Dans ce code, il y a plusieurs champs input de type radio. Ces derniers ont des values diff√©rentes. Avant de r√©cup√©rer la bonne value, nous devons donc savoir quel est le champ qui est coch√©.

Pour cela, nous devons faire une boucle sur l‚Äôensemble des boutons radio jusqu‚Äô√† trouver celui qui a la propri√©t√© checked √† true. Nous pourrons alors r√©cup√©rer la value de ce bouton en particulier.

let baliseCouleur = document.querySelectorAll('input[name="couleur"]')

let couleur = ""

for (let i = 0; i < baliseCouleur.length; i++) {

    if (baliseCouleur[i].checked) {

        couleur = baliseCouleur[i].value

        break

    }

}

console.log(couleur) // affiche la valeur du radio coch√©

Dans le code ci-dessus :

    j‚Äôai d'abord r√©cup√©r√© tous les inputs avec le name qui vaut ‚Äúcouleur‚Äù, en utilisant querySelectorAll ;

    j‚Äôai ensuite parcouru l‚Äôensemble des balises jusqu‚Äô√† trouver une balise qui est coch√©e ;

    j‚Äôai enfin stock√© la couleur dans la variable couleur et j‚Äôai √©crit break, pour stopper la boucle et arriver directement au console.log apr√®s celle-ci. 

R√©capitulons en vid√©o

Je vous propose de revoir ces op√©rations dans la vid√©o ci-dessous :
√Ä vous de jouer !

Pour l‚Äôinstant, dans notre application : 

    l‚Äôutilisateur doit recopier du texte qui provient syst√©matiquement du tableau listeMots ;

    il y a deux boutons radio pour que l‚Äôutilisateur puisse choisir entre ‚ÄúMots‚Äù ou ‚ÄúPhrases‚Äù, mais ils ne fonctionnent pas. 

L‚Äôobjectif de cet exercice est de g√©rer ces boutons radio pour les rendre fonctionnels. Ainsi, √† l‚Äôissue de l‚Äôexercice, lorsque l‚Äôutilisateur cliquera sur ‚ÄúPhrases‚Äù, il devra recopier une phrase. Inversement, lorsqu‚Äôil cliquera sur ‚ÄúMots‚Äù, il devra recopier un mot.

Pour y parvenir :

    √âcoutez l‚Äô√©v√©nement ‚Äúchange‚Äù sur les boutons radio.

N‚Äôh√©sitez pas √† faire un console.log avec la value du bouton radio s√©lectionn√© pour tester le r√©sultat.

    Lorsque cet √©v√©nement se d√©clenche, modifiez le texte propos√© pour le remplacer par une phrase si l‚Äôutilisateur a cliqu√© sur ‚ÄúPhrases‚Äù, ou un mot si l‚Äôutilisateur a cliqu√© sur ‚ÄúMots‚Äù. Pour cela : 

        d√©clarez une nouvelle variable listeProposition initialis√©e par d√©faut √† listeMots ;

        utilisez cette nouvelle variable pour votre traitement √† la place de listeMots ;

        lorsque le joueur clique sur Phrases, modifiez la valeur de listeProposition pour qu‚Äôelle corresponde au tableau des phrases. Quand le joueur clique sur Mots, faites de m√™me ;

        mettez √† jour l‚Äôaffichage.

Corrig√©

Vous pouvez v√©rifier votre travail en consultant le corrig√© et la vid√©o ci-dessous : 
En r√©sum√©

    Utilisez les formulaires pour permettre √† l'utilisateur de saisir des informations. 

    Vous pouvez utiliser diff√©rent types de champs pour saisir ces informations :

        input de diff√©rents types (texte, num√©rique, radio, case √† cocher‚Ä¶) ;

        textarea ;

        select.

    Pour r√©cup√©rer la valeur d‚Äôun champ, utilisez diff√©rentes options en fonction de votre contexte : 

        pour la plupart des champs : utilisez la propri√©t√© value ;

        pour les cases √† cocher : utilisez la propri√©t√© checked ;

        pour r√©cup√©rer la valeur des boutons radio, parcourez-les jusqu‚Äô√† trouver celui qui est coch√©, puis utilisez la propri√©t√© value sur ce bouton.
