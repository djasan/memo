D√©couvrez les tableaux en JavaScript

Si vous manipulez des donn√©es similaires ou qui partagent la m√™me th√©matique, il est pr√©f√©rable de les regrouper dans un tableau, plut√¥t que de les stocker individuellement dans des variables diff√©rentes. Cela vous permet de les retrouver en un seul endroit, et de limiter le nombre de variables dans votre code.
Un tableau en JavaScript est donc un objet qui permet de lister plusieurs variables ou valeurs, et de les regrouper.
D√©clarez un tableau en JavaScript

Pour d√©clarer un tableau en JavaScript, vous devez utiliser les crochets  [ ]  . Chaque valeur contenue dans le tableau est s√©par√©e par une virgule  , 
const maCollectionDeFilms = ["Titanic", "Jurassic Park", "Le Seigneur des Anneaux"]

 stocker des variables dans votre tableau :
const monFilmPrefere = "Titanic"
const monPremierFilm = "Le Seigneur des Anneaux"

const maCollectionDeFilms = [monFilmPrefere, monPremierFilm]



Pour acc√©der √† un √©l√©ment de votre tableau, vous devez utiliser les crochets, et mettre entre crochets le num√©ro de la case que vous voulez regarder. La premi√®re case du tableau correspond √† la case num√©ro z√©ro.

    Pour acc√©der au contenu de cette case, vous √©crirez donc :

// maCollectionDeFilms vaut ["Titanic", "Le Seigneur des Anneaux"]


let premierFilmDuTableau = maCollectionDeFilms[0]


Pour conna√Ætre le nombre d‚Äô√©l√©ments que contient votre tableau, vous devez acc√©der √† la propri√©t√©length, en utilisant le point  .  , comme pour les objets. Cette propri√©t√© est pr√©√©tablie par JavaScript. Elle est donc automatiquement disponible pour tous les tableaux. Pratique !

    Imaginons que vous vouliez conna√Ætre le nombre total de films que vous poss√©dez dans votre collection. Vous √©crirez  :
const maCollectionDeFilms = ["Titanic", "Le Seigneur des Anneaux"]
const nombreDeFilms = maCollectionDeFilms.length
console.log(nombreDeFilms)
// nombreDeFilms vaut 2
const maCollectionDeFilms = ["Titanic", "Le Seigneur des Anneaux"]
const nombreDeFilms = maCollectionDeFilms.length
console.log(nombreDeFilms)
// nombreDeFilms vaut 2

Les tableaux sont des conteneurs, comme les objets que nous avons vus dans le chapitre pr√©c√©dent. Pour effectuer des actions sur les donn√©es stock√©es dans votre tableau (ajouter, supprimer des donn√©es‚Ä¶), vous utiliserez des m√©thodes.

Les m√©thodes s‚Äôutilisent avec des parenth√®ses  ( )  . √Ä l‚Äôint√©rieur de ces parenth√®ses vous pouvez passer des valeurs, c'est-√†-dire des donn√©es, qui serviront √† la m√©thode pour modifier les donn√©es de votre tableau. En r√©alit√©, vous avez d√©j√† utilis√© une m√©thode fournie par JavaScript : console.log() ! 
Ajoutez des donn√©es gr√¢ce √† la m√©thode push

Pour ajouter des donn√©es √† un tableau, vous devez utiliser la m√©thode push en lui indiquant la valeur que vous souhaitez ajouter.

    Si vous voulez ajouter Retour vers le futur √† votre liste de films, vous √©crirez :


let mesFilms = ["Titanic", "Jurassic Park"]
mesFilms.push("Retour vers le futur")

console.log(mesFilms)
// mesFilms vaut ["Titanic", "Jurassic Park", "Retour vers le Futur"]


Pour supprimer la derni√®re donn√©e de votre tableau, vous pouvez utiliser la m√©thode pop sans avoir besoin de passer de valeurs (c'est-√†-dire, sans rien √©crire entre les parenth√®ses).

    Si vous voulez retirer Retour vers le futur de votre liste de films, vous √©crirez :

let mesFilms = ["Titanic", "Jurassic Park", "Retour vers le futur"]
mesFilms.pop()

// mesFilms vaut ["Titanic", "Jurassic Park"]
Distinguez les copies par ‚Äúvaleur‚Äù et par ‚Äúr√©f√©rence‚Äù
La copie par valeur

Lorsqu‚Äôon programme, il arrive parfois que l‚Äôon veuille dupliquer une variable. C‚Äôest le cas lorsque l‚Äôon doit sauvegarder une valeur avant de la modifier, par exemple. Pour cela, le plus simple est de copier le contenu d‚Äôune variable √† l‚Äôint√©rieur d‚Äôune autre variable.

Mais que se passe-t-il en r√©alit√© lorsque nous effectuons cette op√©ration 
// Copie par valeur
let variableSimple1 = 25
let variableSimple2 = variableSimple1

cela va d√©pendre du type de la variable. Si variable2 est un type simple (boolean, number ou string), alors le contenu sera dupliqu√©.

Souvenez-vous, dans le deuxi√®me chapitre du cours, je vous expliquais que, lorsqu‚Äôon cr√©e une variable, on lui attribue une √©tiquette. Pour reprendre notre m√©taphore de l‚Äôarmoire, ce qui est dans le tiroir variable1 va √™tre dupliqu√©, et la copie sera mise dans variable2. Au final, nous aurons deux tiroirs ind√©pendants avec chacun une valeur √† l‚Äôint√©rieur.

C‚Äôest ce qu‚Äôon appelle la copie par valeur. Nous avons copi√© le contenu d‚Äôune variable √† l‚Äôint√©rieur d‚Äôune autre variable. Nous avons donc deux variables ind√©pendantes.
La copie par r√©f√©rence

Imaginez maintenant que vous vouliez copier une variable qui contient un contenu de type ‚Äúcomplexe‚Äù :  un objet ou un tableau, par exemple. Dans ce cas, JavaScript fait une copie par r√©f√©rence.
let variableComplexe1 = ['pomme', 'cerise']
let variableComplexe2 = variableComplexe1


Eh bien non, car JavaScript a pens√© √† tout ! üòÉ Vous n‚Äôaurez donc qu‚Äô√† utiliser un spread operator. Comme le  ++  que nous avons d√©j√† crois√©, c‚Äôest un op√©rateur qui nous permet de faire automatiquement la copie, et cet op√©rateur s‚Äô√©crit‚Ä¶.

////////////////////
// Copie par valeur
////////////////////
let variableSimple1 = 25
let variableSimple2 = variableSimple1

variableSimple2 = 30

// Le console.log va afficher 25, le fait d‚Äôavoir chang√© la valeur de variableSimple2 ne change rien pour variableSimple1
console.log("variableSimple1", variableSimple1)
console.log("variableSimple2", variableSimple2)

///////////////////////
// Copie par r√©f√©rence
///////////////////////
let variableComplexe1 = ['pomme', 'cerise']
let variableComplexe2 = variableComplexe1
let variableComplexe3 = [...variableComplexe1];

variableComplexe2.push('poire')

// Le console.log va afficher pomme cerise ET poire. On a modifi√© la seconde variable, mais le contenu de la premi√®re a √©t√© chang√© aussi, parce que c‚Äôest le m√™me contenu.
console.log('variableComplexe1', variableComplexe1)
console.log('variableComplexe2', variableComplexe2)
console.log('variableComplexe3', variableComplexe3)
D√©clarez les morceaux de votre playlist

Commen√ßons par faire un inventaire des CD en votre possession.

    D√©clarez un tableau playlist qui contiendra trois de vos morceaux pr√©f√©r√©s.

    Stockez le nombre de morceaux disponibles dans une variable totalMorceaux.

Ajoutez les morceaux de vos amis

Pour plaire √† tout le monde, vous d√©cidez de laisser vos amis choisir deux morceaux suppl√©mentaires pour compl√©ter votre collection.

    Ajoutez deux morceaux au tableau playlist de mani√®re √† porter le total √† cinq morceaux.

Enlevez le dernier morceau de votre playlist

Malheureusement, certains ne sont pas d‚Äôaccord avec le dernier morceau ajout√©. Il va falloir faire du tri ! üò±

    Supprimez le dernier morceau ajout√© √† votre collection.
let playlist = ["A kind of magic", "We are the champions", "The show must go on"]

playlist.push("Innuendo")
playlist.push("Radio Gaga")

playlist.pop()

console.log(playlist)
    Un tableau est un conteneur qui permet de regrouper plusieurs valeurs ou variables.

    Un tableau poss√®de une propri√©t√© length qui permet de conna√Ætre le nombre de donn√©es contenues dans un tableau.

    Une m√©thode s‚Äôutilise avec des parenth√®ses  ( )  , et permet d‚Äôinteragir avec le contenu du tableau. Il existe de nombreuses m√©thodes diff√©rentes mises √† disposition par le langage.

    Lorsqu‚Äôon copie une variable simple, JavaScript r√©alise une copie par valeur (la valeur est dupliqu√©e).

    Lorsqu‚Äôon copie une variable complexe, JavaScript r√©alise une copie par r√©f√©rence (les deux variables pointent sur la m√™me valeur).



