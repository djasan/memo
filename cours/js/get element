<body>
    <header>
        <h1>AzerType</h1>
    </header>

    <main>
        <div>
            <h2>Le jeu</h2>
            <p>Un petit texte</p>
        </div>
        <div>
            <h2>Une autre div</h2>
            <p>Un autre texte</p>
        </div>
    </main>

    <footer>
        @Copyright : OpenClassrooms.
    </footer>
</body>





Dans la structure ci-dessus :

    le body en haut repr√©sente la racine de l‚Äôarbre DOM ;

    de cette racine se d√©ploient des branches (en bleu sur l‚Äôimage) ;

    ces branches m√®nent √† des n≈ìuds : header, main, footer, h1, h2, div, p‚Ä¶ ;

    les branches se terminent g√©n√©ralement par une feuille : texte. 

En d√©veloppement informatique, on dit que header, main et footer sont les noeuds enfants de body, et que body est le parent de ces n≈ìuds.

Chaque n≈ìud de cet arbre DOM (header, main, div‚Ä¶) est un objet HTMLElement. Pour le dire autrement, JavaScript a regroup√© dans un m√™me objet deux choses : 

    les informations sur cet objet (son nom, son id, sa position, etc.) : ce sont les propri√©t√©s de l‚Äôobjet ;

    ce que cet objet est capable de faire (r√©agir au clic, par exemple) : ce sont les m√©thodes. 

Dans ce cours, nous explorons plusieurs propri√©t√©s et m√©thodes, mais il en existe d‚Äôautres. Si vous voulez en savoir plus, la documentation est √† votre disposition. üòÉ
R√©cup√©rez un √©l√©ment du DOM

Dans ce chapitre, notre but est de r√©cup√©rer certains √©l√©ments de l‚Äôarbre DOM, qui a pour racine la balise body. Cependant, vous vous souvenez peut-√™tre que nos fichiers JavaScript sont stock√©s dans la balise head, qui se situe avant le body.
Utilisez defer pour diff√©rer l‚Äôex√©cution du script

<script src="scripts/config.js" defer></script>
<script src="scripts/script.js" defer></script>
<script src="scripts/main.js" defer></script>

Utilisez diff√©rentes syntaxes pour r√©cup√©rer un √©l√©ment

JavaScript propose tout un √©ventail de m√©thodes pour r√©cup√©rer les √©l√©ments du DOM. Dans ce chapitre, nous en aborderons trois :

    getElementById ;

    querySelector ;

    querySelectorAll.



La premi√®re m√©thode, et probablement la plus simple, est getElementById. Comme son nom l‚Äôindique, elle permet de r√©cup√©rer un √©l√©ment en fournissant son id en param√®tre.

    Dans notre application par exemple, nous affichions jusqu‚Äô√† maintenant le mot √† recopier dans le texte du prompt. D√©sormais, notre objectif est de l‚Äôafficher dans une zone de la page d√©di√©e.

Pour cela, nous pouvons commencer par cr√©er une div dans le HTML. Pour la distinguer des autres, nous lui fournissons un id :

<body>
    <div id="zoneProposition">Cachalot</div>
</body>

let baliseZoneProposition = document.getElementById("zoneProposition");
console.log(baliseZoneProposition);
Ici, nous avons demand√© √† JavaScript, depuis document, donc toute la page : ‚ÄúTrouve-moi un √©l√©ment HTML qui a pour id zoneProposition‚Äù. Puis nous avons mis le r√©sultat dans la variable baliseZoneProposition. 

Quand nous faisons un console.log de cette variable, nous constatons bien le contenu de notre variable baliseZoneProposition, et nous retrouvons bien notre div :



Pour manipuler le DOM, JavaScript doit ainsi construire une variable globale, document, qui est donc accessible depuis n‚Äôimporte o√π dans notre code. Cependant, pour construire cette variable, la page HTML doit √™tre charg√©e en entier. Or, le script √©tant lanc√© dans la balise head, avant que le body ne s‚Äôaffiche √† l‚Äô√©cran, la page HTML n‚Äôexiste pas encore. Nous devons donc attendre que la page ait fini de charger avant d‚Äôutiliser la variable document.

Pour r√©soudre ce probl√®me, la m√©thode la plus efficace est d‚Äôajouter le mot-cl√© defer dans la balise script. Concr√®tement, cela revient √† demander au navigateur ‚ÄúSi tu rencontres la balise script, diff√®re sa prise en compte et attends que la page soit charg√©e.‚Äù

<script src="scripts/config.js" defer></script>

<script src="scripts/script.js" defer></script>

<script src="scripts/main.js" defer></script>

Utilisez diff√©rentes syntaxes pour r√©cup√©rer un √©l√©ment

JavaScript propose tout un √©ventail de m√©thodes pour r√©cup√©rer les √©l√©ments du DOM. Dans ce chapitre, nous en aborderons trois :

    getElementById ;

    querySelector ;

    querySelectorAll.

Il existe bien s√ªr d‚Äôautres m√©thodes, et je vous invite d‚Äôailleurs √† les d√©couvrir par vous-m√™me. L‚Äôessentiel est de choisir la m√©thode la plus adapt√©e √† la probl√©matique suivante : cibler le ou les √©l√©ments qui nous int√©ressent au milieu d‚Äôune page HTML souvent tr√®s cons√©quente. 
R√©cup√©rez un √©l√©ment avec getElementById

La premi√®re m√©thode, et probablement la plus simple, est getElementById. Comme son nom l‚Äôindique, elle permet de r√©cup√©rer un √©l√©ment en fournissant son id en param√®tre.

    Dans notre application par exemple, nous affichions jusqu‚Äô√† maintenant le mot √† recopier dans le texte du prompt. D√©sormais, notre objectif est de l‚Äôafficher dans une zone de la page d√©di√©e.

Pour cela, nous pouvons commencer par cr√©er une div dans le HTML. Pour la distinguer des autres, nous lui fournissons un id :

<body>

    <div id="zoneProposition">Cachalot</div>

</body>

Pour acc√©der √† cette balise, nous allons donc √©crire :

let baliseZoneProposition = document.getElementById("zoneProposition");

console.log(baliseZoneProposition);

Ici, nous avons demand√© √† JavaScript, depuis document, donc toute la page : ‚ÄúTrouve-moi un √©l√©ment HTML qui a pour id zoneProposition‚Äù. Puis nous avons mis le r√©sultat dans la variable baliseZoneProposition. 

Quand nous faisons un console.log de cette variable, nous constatons bien le contenu de notre variable baliseZoneProposition, et nous retrouvons bien notre div :
√Ä gauche de la capture d'√©cran : un petit triangle √† c√¥t√© d'une div.
R√©sultat d‚Äôun getElementById dans la console

Cette variable est un objet de type HTMLElement. Si nous cliquons sur le petit triangle √† c√¥t√© de cette div pour d√©ployer le contenu, les d√©tails de cet objet HTMLElement vont s‚Äôafficher, comme dans la capture d‚Äô√©cran ci-dessous.
Les d√©tails de la div id= sont affich√©es sur la capture d'√©cran (20 lignes).
D√©tail d‚Äôun objet HTMLElement

Ah oui‚Ä¶. Ca fait beaucoup d'informations, tout √ßa !

Eh oui‚Ä¶ JavaScript propose beaucoup de propri√©t√©s et de m√©thodes sur les objets HTLMElement. Pour vous, ce sont autant d‚Äôopportunit√©s d‚Äôaller les piocher en fonction de vos besoins !

Enfin, comme pour n‚Äôimporte quel objet en JavaScript, vous pouvez acc√©der aux propri√©t√©s de votre n≈ìud gr√¢ce au point ‚Äú.‚Äù .

    Par exemple, pour afficher la hauteur de l‚Äô√©l√©ment dans votre console, vous pouvez √©crire :

console.log(baliseZoneProposition.clientHeight);

R√©cup√©rez un √©l√©ment QuerySelector

Lorsqu‚Äôon a un id sur nos √©l√©ments, document.getElementById est une bonne option pour les r√©cup√©rer. Malheureusement, il arrive r√©guli√®rement que √ßa ne soit pas le cas !

JavaScript a donn√© une r√©ponse particuli√®rement intuitive √† ce probl√®me : utiliser les s√©lecteurs CSS. En gros, si vous savez d√©signer un √©l√©ment en CSS, alors il vous suffit de reprendre exactement la m√™me syntaxe ! üòÉ

    Modifions l√©g√®rement le contenu de notre page HTML pour illustrer cela :

<body>

    <div id="zoneProposition">

        Entrez le mot : <span>Cachalot</span>

    </div>

</body>

Pour mettre le mot Cachalot en gras en CSS, nous aurions √©crit :

#zoneProposition span {

    font-weight: bold;

}

Ce code signifie : ‚ÄúIl faut mettre la police d‚Äô√©criture en gras pour tous les span contenus dans un √©l√©ment qui a l‚Äôid zoneProposition.‚Äù

querySelector nous permet de trouver le premier √©l√©ment qui correspond au s√©lecteur CSS propos√© :

let baliseZonePropositionSpan = document.querySelector("#zoneProposition span");

console.log(baliseZonePropositionSpan);

Et voil√† le r√©sultat dans la capture d‚Äô√©cran ci-dessous : nous voyons dans la console que nous avons bien trouv√© notre span.
Capture d'√©cran. Sous l'onglet Console, s'affiche √† droite d'un petit triangle.
R√©sultat de la r√©cup√©ration d‚Äôune balise avec querySelector

Notez que  #  est pr√©sent devant l‚Äôid, comme on l‚Äô√©crirait en CSS, alors que ce  #  n‚Äô√©tait pas n√©cessaire avec getElementById.
R√©cup√©rez plusieurs √©l√©ments avec QuerySelectorAll

Ici, le principe est le m√™me que pour tous les √©l√©ments dans une liste de type NodeList (ou liste de n≈ìuds, en fran√ßais).

Modifions √† nouveau notre body :

<body>

    <div class="zoneChoix">

        <input type="radio" name="optionSource" id="mots" value="1" checked>

        <label for="mots">Mots</label>

        <input type="radio" name="optionSource" id="phrases" value="2">

        <label for="phrases">Phrases</label>

    </div>

    <div class="zoneProposition">

        Entrez le mot : <span>Cachalot</span>

    </div>


</body>

Dans ce code, j‚Äôai ajout√© une nouvelle div avec la classe zoneChoix. Cette div contient deux inputs de type radio.

Pour r√©cup√©rer tous les inputs de type radio d‚Äôun seul coup, je peux donc √©crire :

let listeInputRadio = document.querySelectorAll(".zoneChoix input");

console.log(listeInputRadio);

Notez que j‚Äôai √©crit .zoneChoix et pas #, car ici, j‚Äôai mis une classe √† ma div et pas un id.

Et voici le r√©sultat : nous obtenons une NodeList.
Sous l'onglet Console, la NodeList s'affiche √† droite d'un petit triangle.
R√©sultat du querySelectorAll : une NodeList

Nous voyons bien ici notre NodeList. Pour reprendre l‚Äôimage de l‚Äôarbre DOM, JavaScript a s√©lectionn√© dans cet arbre les n≈ìuds qui correspondent √† notre s√©lecteur CSS.

Nous allons devoir parcourir les diff√©rents √©l√©ments de cette liste un par un pour y acc√©der. Nous utiliserons donc une boucle :

for (let i = 0; i < listeInputRadio.length; i++) {

    console.log(listeInputRadio[i]);

}

Et voil√† le r√©sultat, nous retrouvons bien le d√©tail de tous nos √©l√©ments :
Capture d'√©cran affichant deux lignes qui d√©taillent les √©l√©ments.
R√©sultat de la boucle qui parcourt les √©l√©ments d‚Äôune NodeListe
R√©capitulons en vid√©o

Retrouvez les d√©monstrations de ce chapitre dans la vid√©o ci-dessous :
√Ä vous de jouer !

Dans cet exercice, je vous propose de r√©cup√©rer plusieurs √©l√©ments dont nous aurons besoin dans le chapitre suivant, lorsque nous proc√©derons √† la modification de la page.

Comme j‚Äôaime vous faciliter la vie, j‚Äôai modifi√© l√©g√®rement le projet et r√©alis√© la partie HTML/CSS pour cet exercice. Vous la trouverez ici.

Dans le fichier main.js :

    S√©lectionnez avec la m√©thode getElementById : 

        l‚Äôinput dans lequel le joueur va √©crire son texte ; 

        le bouton de validation.

    S√©lectionnez avec la m√©thode querySelector : 

        l‚Äôendroit o√π le mot propos√© sera affich√© ;

        l‚Äôendroit o√π le score sera affich√©. 

    S√©lectionnez avec la m√©thode querySelectorAll : 

        les boutons radio de choix. 

N‚Äôoubliez pas de v√©rifier que la s√©lection est correcte √† chaque fois, en utilisant un console.log !
Corrig√©

Vous pouvez v√©rifier votre travail en consultant le corrig√© et la vid√©o ci-dessous : 
En r√©sum√©

    Une page web est constitu√©e de balises HTML, et repose sur une structure que l‚Äôon appelle DOM. Cette structure permet de relier les balises entre elles.

    Pour r√©cup√©rer un √©l√©ment du DOM :

        utilisez defer dans l‚Äôinclusion de vos fichiers JS pour retarder leur prise en compte, afin que la variable document ait le temps d‚Äô√™tre cr√©√©e ; 

        partez du point d‚Äôentr√©e du DOM : la variable document ;

        utilisez les m√©thodes adapt√©es : getElementById, querySelector ou querySelectorAll.
Par exemple, pour afficher la hauteur de l‚Äô√©l√©ment dans votre console, vous pouvez √©crire :

console.log(baliseZoneProposition.clientHeight);

<body>
    <div id="zoneProposition">
        Entrez le mot : <span>Cachalot</span>
    </div>
</body>
#zoneProposition span {
    font-weight: bold;
}

querySelector nous permet de trouver le premier √©l√©ment qui correspond au s√©lecteur CSS propos√© :
let baliseZonePropositionSpan = document.querySelector("#zoneProposition span");
console.log(baliseZonePropositionSpan);

  Ici, le principe est le m√™me que pour tous les √©l√©ments dans une liste de type NodeList (ou liste de n≈ìuds, en fran√ßais).

Modifions √† nouveau notre body :

<body>
    <div class="zoneChoix">
        <input type="radio" name="optionSource" id="mots" value="1" checked>
        <label for="mots">Mots</label>
        <input type="radio" name="optionSource" id="phrases" value="2">
        <label for="phrases">Phrases</label>
    </div>
    <div class="zoneProposition">
        Entrez le mot : <span>Cachalot</span>
    </div>

</body>
une nouvelle div avec la classe zoneChoix. Cette div contient deux inputs de type radio.

Pour r√©cup√©rer tous les inputs de type radio d‚Äôun seul coup, je peux donc √©crire :

let listeInputRadio = document.querySelectorAll(".zoneChoix input");
console.log(listeInputRadio);


zoneChoix et pas #, car ici, j‚Äôai mis une classe √† ma div et pas un id.

Et voici le r√©sultat : nous obtenons une NodeList.
Nous voyons bien ici notre NodeList. Pour reprendre l‚Äôimage de l‚Äôarbre DOM, JavaScript a s√©lectionn√© dans cet arbre les n≈ìuds qui correspondent √† notre s√©lecteur CSS.

Nous allons devoir parcourir les diff√©rents √©l√©ments de cette liste un par un pour y acc√©der. Nous utiliserons donc une boucle :
for (let i = 0; i < listeInputRadio.length; i++) {
    console.log(listeInputRadio[i]);
}

