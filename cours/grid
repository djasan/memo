.conteneur {
    display: grid;
}
On va d√©finir les colonnes et les rang√©es avec deux propri√©t√©s :

    grid-template-columns pour le nombre de colonnes, et la largeur de chacune d'entre elles.

    grid-template-rows pour le nombre de rang√©es, et la hauteur de chacune d'entre elles.
<div class="conteneur">
    <div class="box">üê∏ √âl√©ment 1</div>
    <div class="box">ü¶ä √âl√©ment 2</div>
    <div class="box">ü¶Ñ √âl√©ment 3</div>
    <div class="box">üê∂ √âl√©ment 4</div>
    <div class="box">üê® √âl√©ment 5</div>
    <div class="box">üêí √âl√©ment 6</div>
    <div class="box">ü¶Ü √âl√©ment 7</div>
    <div class="box">üêô √âl√©ment 8</div>
    <div class="box">üêã √âl√©ment 9</div>
</div>


.box {
  height: 150px;
}
.conteneur {
    display: grid;
    grid-template-columns: 200px 200px 200px;
}
.conteneur {
    display: grid;
    grid-template-columns: 100px 300px 200px;
}


finissez vos rang√©es avec la propri√©t√© CSS grid-template-rows

Passons maintenant √† la propri√©t√© grid-template-rows. Et on fait bien attention √† supprimer la hauteur fixe qu'on avait associ√©e √† la classe  .box :  height: 150px;  .

Pourquoi il faut faire √ßa ? Je ne comprends pas.

En fait, indiquer une hauteur avec la propri√©t√©  height  √†  .box  a pour effet d'assigner une hauteur fixe pour tous les √©l√©ments de classe  .box  . Or, on peut avoir besoin de d√©finir des hauteurs diff√©rentes aux rang√©es, ce qu'on va pouvoir sp√©cifier avec  grid-template-rows  , en indiquant la hauteur de chacune, comme on l'a fait pour  grid-template-columns  :

.conteneur {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-template-rows: 100px 150px 200px;
}
.box {
  height: 150px;
}

.conteneur {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-template-rows: 100px 150px 200px;
}




.conteneur {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-template-rows: 100px 150px 200px;
    gap: 10px;
}


A√©rez votre contenu avec la propri√©t√© CSS  gap

La propri√©t√© CSS gap permet de cr√©er des espacements entre vos √©l√©ments. Si vous voulez garder les m√™mes distances entre les rang√©es et les colonnes sans avoir √† vous compliquer la vie, vous pr√©cisez simplement une valeur.

Jusqu'√† maintenant, nous avons utilis√© une unit√© en px pour d√©finir les hauteurs et largeurs des rang√©es et colonnes. Mais il est √©galement possible d'utiliser des em, rem, et des pourcentages.

Et encore mieux : je vais vous montrer une unit√© qui est sp√©cifique aux grids : les "fraction units", ou fr pour les intimes, qui repr√©sentent des parts de largeur dans les colonnes.
.conteneur {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 50px 100px 200px;
    gap: 10px;
}


.conteneur {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    grid-template-rows: 50px 100px 200px;
    grid-gap: 10px;
}
D√©finissez la taille des √©l√©ments de votre  grid
Prenons notre premi√®re  div  :  .une.
.une {
    grid-column-start: 1;
    grid-column-end: 4;
}
.une {
    grid-column: 1 / 4;




.deux {
    grid-row-start: 2;
    grid-row-end: 4;
}
}

Pour cela, vous allez apprendre √† ma√Ætriser les propri√©t√©s li√©es √† grid-column  et grid-row.
.deux {
    grid-row: 2 / 4;
}

Grilles CSS (CSS Grid)

Le module CSS Grid layout (mod√®le de disposition en grille) est un module de la sp√©cification CSS qui permet de cr√©er des mises en page en divisant l'espace d'affichage en r√©gions utilisables par une application ou en d√©finissant des relations de taille, position et d'empilement entre les √©l√©ments HTML.

Comme les tableaux, la grille permet d'aligner des √©l√©ments sous forme de colonnes et de lignes mais √† la diff√©rence des tableaux, la grille n'a pas de structure de contenu. Ainsi, on peut cr√©er de nombreuses mises en page qui n'auraient pas √©t√© possibles avec les tableaux. Ainsi, les √©l√©ments fils d'un conteneur en grille peuvent √™tre positionn√©s afin qu'ils se chevauchent ou qu'ils se comportent comme des √©l√©ments positionn√©s.
Un exemple simple

Dans l'exemple qui suit, on montre comment utiliser une grille avec trois pistes en colonnes pour laquelle les nouvelles lignes cr√©√©es mesureront au moins 100 pixels et auront au plus la taille automatique (d√©finie par leur contenu). Les √©l√©ments sont plac√©s sur la grille gr√¢ce aux num√©ros des lignes horizontales et verticales.
HTML

html

<div class="wrapper">
  <div class="one">Un</div>
  <div class="two">Deux</div>
  <div class="three">Trois</div>
  <div class="four">Quatre</div>
  <div class="five">Cinq</div>
  <div class="six">Six</div>
</div>

CSS

css

.wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 10px;
  grid-auto-rows: minmax(100px, auto);
}
.one {
  grid-column: 1 / 3;
  grid-row: 1;
}
.two {
  grid-column: 2 / 4;
  grid-row: 1 / 3;
}
.three {
  grid-column: 1;
  grid-row: 2 / 5;
}
.four {
  grid-column: 3;
  grid-row: 3;
}
.five {
  grid-column: 2;
  grid-row: 4;
}
.six {
  grid-column: 3;
  grid-row: 4;
}


    Les CSS Grids sont compl√©mentaires √† Flexbox et permettent de cr√©er facilement des mises en page plus √©labor√©es que Flexbox, sans forc√©ment avoir des √©l√©ments de la m√™me taille.

    Pour d√©clarer une grid, on d√©clare simplement  display: grid;  sur le conteneur : notre navigateur comprend tout de suite que nos √©l√©ments sont dans la grid.

    On d√©finit les colonnes avec grid-template-columns  et les rang√©es avec grid-template-rows : en fonction du nombre de valeurs pass√©es, de nouvelles colonnes et rang√©es sont cr√©√©es.

    En plus des unit√©s classiques  px  ,  em  ,  rem  et  %  , les  fr  sont encore plus simples, et permettent d'indiquer une fraction de la grille.

    gap  permet d'espacer les √©l√©ments entre eux.

    Les grids cr√©ent implicitement des lignes horizontales et verticales d√©limitant les diff√©rentes rang√©es et colonnes.

    Chaque √©l√©ment peut avoir :

        son propre point de d√©part horizontal avec  grid-row-start  ;

        son point d'arriv√©e horizontal avec  grid-row-end  ;

        son point de d√©part vertical avec  grid-column-start  ;

        et son point d'arriv√©e vertical avec  grid-column-end  .


